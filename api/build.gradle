apply plugin: 'com.android.library'

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId "com.tale.androidsqlhelper"
        minSdkVersion 8
        targetSdkVersion 8
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}


android.libraryVariants.all { variant ->

    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html'
        exclude '**/BuildConfig.class', '**/BuildConfig.html'
        exclude '**/Timber.*'
    }

    task("javaDoc${variant.name.capitalize()}", type: Jar) {
        classifier = "javadoc"
        description "Bundles Javadoc into a JAR file for $variant.name."
        from tasks["generate${variant.name.capitalize()}Javadoc"]
    }

    task("jar${variant.name.capitalize()}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html'

        manifest {
            attributes("Manifest-Version": "1.0",
                    "Created-By": "Tale Nguyen",
                    "Specification-Title": "PrettySharePreferences",
                    "Specification-Version": "1.0",
                    "Specification-Vendor": "Tale Nguyen",
            )
        }
    }
}
